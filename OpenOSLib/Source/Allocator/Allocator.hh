//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AbstractAllocator.hh
//  @ Date : 12.04.2006
//  @ Author : 
//
//


#if !defined(_ABSTRACTALLOCATOR_H)
#define _ABSTRACTALLOCATOR_H

#include "OpenOSIncludes.hh"

//! abstract facility for the allocation of memory with a specified characteristics

/*! an allocator provides memory with a certain characteristics (e.g. shared memory,
 *   memory located at a certain virtual address, ...) and methods to allocate and/or
 *   free chunks in this memory area.
 */

class Allocator
{
public:
	Allocator();
	virtual ~Allocator();

    virtual ASAAC_Address allocate(long Size) = 0; 
    //!< allocate a memory chunk
    /*!< \param[in] Size Size of memory chunk to be allocated.
     * 
     * \returns ASAAC_Address of allocated memory chunk.
     * 
     * If memory could not be allocated, allocate() throws an AllocationException.
     */

    virtual void free(ASAAC_Address AllocatedAddress) = 0; 
    //!< free an allocated memory chunk
    /*!< \param[in] AllocatedAddress ASAAC_Address of previously allocated memory chunk.
     * 
     * Note: This is an optional method. While a provided longerface, classes realizing the 
     * allocator longerface need not take any action on a 'free' call.
     */
    
    virtual void reset() = 0;
    //!< reset all longernal structures of the allocator
    /*!< All longernal data structures contained in the allocator will be reset,
     *   data allocated inside the allocator is no longer safe from being claimed
     *   by new allocate() calls and being overwritten.
     */
    
    virtual unsigned long getSize() const = 0;
    //!< get number of absolute bytes available in the allocator
    
    virtual unsigned long getFreeMemory() const = 0;
    //!< get number of free bytes available in the allocator
    
    virtual unsigned long getUsedMemory() const = 0;
    //<! get number of used bytes in the allocator
    
    virtual unsigned long getAllocationCounter() const = 0;
};


unsigned long getDWordSize( unsigned long Size );
//!< find the next-larger, dword-aligned size for a structure to be allocated


#endif  //_ABSTRACTALLOCATOR_H
